// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/pbpipes.proto

#ifndef PROTOBUF_proto_2fpbpipes_2eproto__INCLUDED
#define PROTOBUF_proto_2fpbpipes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbpipes {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fpbpipes_2eproto();
void protobuf_AssignDesc_proto_2fpbpipes_2eproto();
void protobuf_ShutdownFile_proto_2fpbpipes_2eproto();

class DriverConfig;
class ExecutorSpec;
class HBaseRegionInfo;
class TaskInfo;
class TaskResult;

// ===================================================================

class HBaseRegionInfo : public ::google::protobuf::Message {
 public:
  HBaseRegionInfo();
  virtual ~HBaseRegionInfo();

  HBaseRegionInfo(const HBaseRegionInfo& from);

  inline HBaseRegionInfo& operator=(const HBaseRegionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HBaseRegionInfo& default_instance();

  void Swap(HBaseRegionInfo* other);

  // implements Message ----------------------------------------------

  inline HBaseRegionInfo* New() const { return New(NULL); }

  HBaseRegionInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HBaseRegionInfo& from);
  void MergeFrom(const HBaseRegionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HBaseRegionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes start_key = 1;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 1;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 2;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 2;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // optional int64 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional bytes name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional bytes server_name = 6;
  void clear_server_name();
  static const int kServerNameFieldNumber = 6;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  void set_server_name(const char* value);
  void set_server_name(const void* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // optional int32 port = 7;
  void clear_port();
  static const int kPortFieldNumber = 7;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbpipes.proto.HBaseRegionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_AssignDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpbpipes_2eproto();

  void InitAsDefaultInstance();
  static HBaseRegionInfo* default_instance_;
};
// -------------------------------------------------------------------

class TaskInfo : public ::google::protobuf::Message {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();

  void Swap(TaskInfo* other);

  // implements Message ----------------------------------------------

  inline TaskInfo* New() const { return New(NULL); }

  TaskInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional int32 total = 2;
  void clear_total();
  static const int kTotalFieldNumber = 2;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // optional .pbpipes.proto.HBaseRegionInfo region = 3;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::pbpipes::proto::HBaseRegionInfo& region() const;
  ::pbpipes::proto::HBaseRegionInfo* mutable_region();
  ::pbpipes::proto::HBaseRegionInfo* release_region();
  void set_allocated_region(::pbpipes::proto::HBaseRegionInfo* region);

  // @@protoc_insertion_point(class_scope:pbpipes.proto.TaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 total_;
  ::pbpipes::proto::HBaseRegionInfo* region_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_AssignDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpbpipes_2eproto();

  void InitAsDefaultInstance();
  static TaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class TaskResult : public ::google::protobuf::Message {
 public:
  TaskResult();
  virtual ~TaskResult();

  TaskResult(const TaskResult& from);

  inline TaskResult& operator=(const TaskResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskResult& default_instance();

  void Swap(TaskResult* other);

  // implements Message ----------------------------------------------

  inline TaskResult* New() const { return New(NULL); }

  TaskResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskResult& from);
  void MergeFrom(const TaskResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ok = 1;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:pbpipes.proto.TaskResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool ok_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_AssignDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpbpipes_2eproto();

  void InitAsDefaultInstance();
  static TaskResult* default_instance_;
};
// -------------------------------------------------------------------

class ExecutorSpec : public ::google::protobuf::Message {
 public:
  ExecutorSpec();
  virtual ~ExecutorSpec();

  ExecutorSpec(const ExecutorSpec& from);

  inline ExecutorSpec& operator=(const ExecutorSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutorSpec& default_instance();

  void Swap(ExecutorSpec* other);

  // implements Message ----------------------------------------------

  inline ExecutorSpec* New() const { return New(NULL); }

  ExecutorSpec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutorSpec& from);
  void MergeFrom(const ExecutorSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExecutorSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional int32 num_executors = 2;
  void clear_num_executors();
  static const int kNumExecutorsFieldNumber = 2;
  ::google::protobuf::int32 num_executors() const;
  void set_num_executors(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbpipes.proto.ExecutorSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 num_executors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_AssignDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpbpipes_2eproto();

  void InitAsDefaultInstance();
  static ExecutorSpec* default_instance_;
};
// -------------------------------------------------------------------

class DriverConfig : public ::google::protobuf::Message {
 public:
  DriverConfig();
  virtual ~DriverConfig();

  DriverConfig(const DriverConfig& from);

  inline DriverConfig& operator=(const DriverConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverConfig& default_instance();

  void Swap(DriverConfig* other);

  // implements Message ----------------------------------------------

  inline DriverConfig* New() const { return New(NULL); }

  DriverConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DriverConfig& from);
  void MergeFrom(const DriverConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriverConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbpipes.proto.ExecutorSpec executors = 1;
  int executors_size() const;
  void clear_executors();
  static const int kExecutorsFieldNumber = 1;
  const ::pbpipes::proto::ExecutorSpec& executors(int index) const;
  ::pbpipes::proto::ExecutorSpec* mutable_executors(int index);
  ::pbpipes::proto::ExecutorSpec* add_executors();
  ::google::protobuf::RepeatedPtrField< ::pbpipes::proto::ExecutorSpec >*
      mutable_executors();
  const ::google::protobuf::RepeatedPtrField< ::pbpipes::proto::ExecutorSpec >&
      executors() const;

  // @@protoc_insertion_point(class_scope:pbpipes.proto.DriverConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pbpipes::proto::ExecutorSpec > executors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_AssignDesc_proto_2fpbpipes_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpbpipes_2eproto();

  void InitAsDefaultInstance();
  static DriverConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HBaseRegionInfo

// optional bytes start_key = 1;
inline void HBaseRegionInfo::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HBaseRegionInfo::start_key() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.start_key)
}
inline void HBaseRegionInfo::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.start_key)
}
inline void HBaseRegionInfo::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.start_key)
}
inline ::std::string* HBaseRegionInfo::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HBaseRegionInfo::release_start_key() {
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.start_key)
}

// optional bytes end_key = 2;
inline void HBaseRegionInfo::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HBaseRegionInfo::end_key() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.end_key)
}
inline void HBaseRegionInfo::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.end_key)
}
inline void HBaseRegionInfo::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.end_key)
}
inline ::std::string* HBaseRegionInfo::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HBaseRegionInfo::release_end_key() {
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.end_key)
}

// optional int64 id = 3;
inline void HBaseRegionInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HBaseRegionInfo::id() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.id)
  return id_;
}
inline void HBaseRegionInfo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.id)
}

// optional bytes name = 4;
inline void HBaseRegionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HBaseRegionInfo::name() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.name)
}
inline void HBaseRegionInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.name)
}
inline void HBaseRegionInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.name)
}
inline ::std::string* HBaseRegionInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HBaseRegionInfo::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.name)
}

// optional int32 version = 5;
inline void HBaseRegionInfo::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 HBaseRegionInfo::version() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.version)
  return version_;
}
inline void HBaseRegionInfo::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.version)
}

// optional bytes server_name = 6;
inline void HBaseRegionInfo::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HBaseRegionInfo::server_name() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.server_name)
  return server_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.server_name)
}
inline void HBaseRegionInfo::set_server_name(const char* value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.server_name)
}
inline void HBaseRegionInfo::set_server_name(const void* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.server_name)
}
inline ::std::string* HBaseRegionInfo::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HBaseRegionInfo::release_server_name() {
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseRegionInfo::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.server_name)
}

// optional int32 port = 7;
inline void HBaseRegionInfo::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 HBaseRegionInfo::port() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.port)
  return port_;
}
inline void HBaseRegionInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.port)
}

// -------------------------------------------------------------------

// TaskInfo

// optional int32 index = 1;
inline void TaskInfo::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 TaskInfo::index() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskInfo.index)
  return index_;
}
inline void TaskInfo::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.TaskInfo.index)
}

// optional int32 total = 2;
inline void TaskInfo::clear_total() {
  total_ = 0;
}
inline ::google::protobuf::int32 TaskInfo::total() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskInfo.total)
  return total_;
}
inline void TaskInfo::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.TaskInfo.total)
}

// optional .pbpipes.proto.HBaseRegionInfo region = 3;
inline bool TaskInfo::has_region() const {
  return !_is_default_instance_ && region_ != NULL;
}
inline void TaskInfo::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
inline const ::pbpipes::proto::HBaseRegionInfo& TaskInfo::region() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskInfo.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::pbpipes::proto::HBaseRegionInfo* TaskInfo::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::pbpipes::proto::HBaseRegionInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.TaskInfo.region)
  return region_;
}
inline ::pbpipes::proto::HBaseRegionInfo* TaskInfo::release_region() {
  
  ::pbpipes::proto::HBaseRegionInfo* temp = region_;
  region_ = NULL;
  return temp;
}
inline void TaskInfo::set_allocated_region(::pbpipes::proto::HBaseRegionInfo* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.TaskInfo.region)
}

// -------------------------------------------------------------------

// TaskResult

// optional bool ok = 1;
inline void TaskResult::clear_ok() {
  ok_ = false;
}
inline bool TaskResult::ok() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskResult.ok)
  return ok_;
}
inline void TaskResult::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.TaskResult.ok)
}

// -------------------------------------------------------------------

// ExecutorSpec

// optional string host = 1;
inline void ExecutorSpec::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutorSpec::host() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.ExecutorSpec.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutorSpec::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.ExecutorSpec.host)
}
inline void ExecutorSpec::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.ExecutorSpec.host)
}
inline void ExecutorSpec::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.ExecutorSpec.host)
}
inline ::std::string* ExecutorSpec::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.ExecutorSpec.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutorSpec::release_host() {
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutorSpec::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.ExecutorSpec.host)
}

// optional int32 num_executors = 2;
inline void ExecutorSpec::clear_num_executors() {
  num_executors_ = 0;
}
inline ::google::protobuf::int32 ExecutorSpec::num_executors() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.ExecutorSpec.num_executors)
  return num_executors_;
}
inline void ExecutorSpec::set_num_executors(::google::protobuf::int32 value) {
  
  num_executors_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.ExecutorSpec.num_executors)
}

// -------------------------------------------------------------------

// DriverConfig

// repeated .pbpipes.proto.ExecutorSpec executors = 1;
inline int DriverConfig::executors_size() const {
  return executors_.size();
}
inline void DriverConfig::clear_executors() {
  executors_.Clear();
}
inline const ::pbpipes::proto::ExecutorSpec& DriverConfig::executors(int index) const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.DriverConfig.executors)
  return executors_.Get(index);
}
inline ::pbpipes::proto::ExecutorSpec* DriverConfig::mutable_executors(int index) {
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.DriverConfig.executors)
  return executors_.Mutable(index);
}
inline ::pbpipes::proto::ExecutorSpec* DriverConfig::add_executors() {
  // @@protoc_insertion_point(field_add:pbpipes.proto.DriverConfig.executors)
  return executors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbpipes::proto::ExecutorSpec >*
DriverConfig::mutable_executors() {
  // @@protoc_insertion_point(field_mutable_list:pbpipes.proto.DriverConfig.executors)
  return &executors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbpipes::proto::ExecutorSpec >&
DriverConfig::executors() const {
  // @@protoc_insertion_point(field_list:pbpipes.proto.DriverConfig.executors)
  return executors_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pbpipes

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fpbpipes_2eproto__INCLUDED
