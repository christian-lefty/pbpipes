// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/pbpipes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/pbpipes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbpipes {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* HBaseRegionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HBaseRegionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutorSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* DriverConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DriverConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fpbpipes_2eproto() {
  protobuf_AddDesc_proto_2fpbpipes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/pbpipes.proto");
  GOOGLE_CHECK(file != NULL);
  HBaseRegionInfo_descriptor_ = file->message_type(0);
  static const int HBaseRegionInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, port_),
  };
  HBaseRegionInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HBaseRegionInfo_descriptor_,
      HBaseRegionInfo::default_instance_,
      HBaseRegionInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(HBaseRegionInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HBaseRegionInfo, _is_default_instance_));
  TaskInfo_descriptor_ = file->message_type(1);
  static const int TaskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, region_),
  };
  TaskInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _is_default_instance_));
  TaskResult_descriptor_ = file->message_type(2);
  static const int TaskResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, ok_),
  };
  TaskResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskResult_descriptor_,
      TaskResult::default_instance_,
      TaskResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, _is_default_instance_));
  ExecutorSpec_descriptor_ = file->message_type(3);
  static const int ExecutorSpec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorSpec, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorSpec, num_executors_),
  };
  ExecutorSpec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExecutorSpec_descriptor_,
      ExecutorSpec::default_instance_,
      ExecutorSpec_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExecutorSpec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorSpec, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorSpec, _is_default_instance_));
  DriverConfig_descriptor_ = file->message_type(4);
  static const int DriverConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverConfig, executors_),
  };
  DriverConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DriverConfig_descriptor_,
      DriverConfig::default_instance_,
      DriverConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(DriverConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fpbpipes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HBaseRegionInfo_descriptor_, &HBaseRegionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskInfo_descriptor_, &TaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskResult_descriptor_, &TaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExecutorSpec_descriptor_, &ExecutorSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DriverConfig_descriptor_, &DriverConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fpbpipes_2eproto() {
  delete HBaseRegionInfo::default_instance_;
  delete HBaseRegionInfo_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
  delete TaskResult::default_instance_;
  delete TaskResult_reflection_;
  delete ExecutorSpec::default_instance_;
  delete ExecutorSpec_reflection_;
  delete DriverConfig::default_instance_;
  delete DriverConfig_reflection_;
}

void protobuf_AddDesc_proto_2fpbpipes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto/pbpipes.proto\022\rpbpipes.proto\"\203\001\n"
    "\017HBaseRegionInfo\022\021\n\tstart_key\030\001 \001(\014\022\017\n\007e"
    "nd_key\030\002 \001(\014\022\n\n\002id\030\003 \001(\003\022\014\n\004name\030\004 \001(\014\022\017"
    "\n\007version\030\005 \001(\005\022\023\n\013server_name\030\006 \001(\014\022\014\n\004"
    "port\030\007 \001(\005\"X\n\010TaskInfo\022\r\n\005index\030\001 \001(\005\022\r\n"
    "\005total\030\002 \001(\005\022.\n\006region\030\003 \001(\0132\036.pbpipes.p"
    "roto.HBaseRegionInfo\"\030\n\nTaskResult\022\n\n\002ok"
    "\030\001 \001(\010\"3\n\014ExecutorSpec\022\014\n\004host\030\001 \001(\t\022\025\n\r"
    "num_executors\030\002 \001(\005\">\n\014DriverConfig\022.\n\te"
    "xecutors\030\001 \003(\0132\033.pbpipes.proto.ExecutorS"
    "pec2J\n\010Executor\022>\n\010PostTask\022\027.pbpipes.pr"
    "oto.TaskInfo\032\031.pbpipes.proto.TaskResultb"
    "\006proto3", 487);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/pbpipes.proto", &protobuf_RegisterTypes);
  HBaseRegionInfo::default_instance_ = new HBaseRegionInfo();
  TaskInfo::default_instance_ = new TaskInfo();
  TaskResult::default_instance_ = new TaskResult();
  ExecutorSpec::default_instance_ = new ExecutorSpec();
  DriverConfig::default_instance_ = new DriverConfig();
  HBaseRegionInfo::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  TaskResult::default_instance_->InitAsDefaultInstance();
  ExecutorSpec::default_instance_->InitAsDefaultInstance();
  DriverConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fpbpipes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fpbpipes_2eproto {
  StaticDescriptorInitializer_proto_2fpbpipes_2eproto() {
    protobuf_AddDesc_proto_2fpbpipes_2eproto();
  }
} static_descriptor_initializer_proto_2fpbpipes_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int HBaseRegionInfo::kStartKeyFieldNumber;
const int HBaseRegionInfo::kEndKeyFieldNumber;
const int HBaseRegionInfo::kIdFieldNumber;
const int HBaseRegionInfo::kNameFieldNumber;
const int HBaseRegionInfo::kVersionFieldNumber;
const int HBaseRegionInfo::kServerNameFieldNumber;
const int HBaseRegionInfo::kPortFieldNumber;
#endif  // !_MSC_VER

HBaseRegionInfo::HBaseRegionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbpipes.proto.HBaseRegionInfo)
}

void HBaseRegionInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HBaseRegionInfo::HBaseRegionInfo(const HBaseRegionInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbpipes.proto.HBaseRegionInfo)
}

void HBaseRegionInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

HBaseRegionInfo::~HBaseRegionInfo() {
  // @@protoc_insertion_point(destructor:pbpipes.proto.HBaseRegionInfo)
  SharedDtor();
}

void HBaseRegionInfo::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HBaseRegionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HBaseRegionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HBaseRegionInfo_descriptor_;
}

const HBaseRegionInfo& HBaseRegionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fpbpipes_2eproto();
  return *default_instance_;
}

HBaseRegionInfo* HBaseRegionInfo::default_instance_ = NULL;

HBaseRegionInfo* HBaseRegionInfo::New(::google::protobuf::Arena* arena) const {
  HBaseRegionInfo* n = new HBaseRegionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HBaseRegionInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HBaseRegionInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, port_);
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool HBaseRegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbpipes.proto.HBaseRegionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 2;
      case 2: {
        if (tag == 18) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional int32 version = 5;
      case 5: {
        if (tag == 40) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server_name;
        break;
      }

      // optional bytes server_name = 6;
      case 6: {
        if (tag == 50) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }

      // optional int32 port = 7;
      case 7: {
        if (tag == 56) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbpipes.proto.HBaseRegionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbpipes.proto.HBaseRegionInfo)
  return false;
#undef DO_
}

void HBaseRegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbpipes.proto.HBaseRegionInfo)
  // optional bytes start_key = 1;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key(), output);
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_key(), output);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // optional bytes name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  // optional int32 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // optional bytes server_name = 6;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->server_name(), output);
  }

  // optional int32 port = 7;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbpipes.proto.HBaseRegionInfo)
}

::google::protobuf::uint8* HBaseRegionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbpipes.proto.HBaseRegionInfo)
  // optional bytes start_key = 1;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key(), target);
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_key(), target);
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // optional bytes name = 4;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional int32 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // optional bytes server_name = 6;
  if (this->server_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->server_name(), target);
  }

  // optional int32 port = 7;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbpipes.proto.HBaseRegionInfo)
  return target;
}

int HBaseRegionInfo::ByteSize() const {
  int total_size = 0;

  // optional bytes start_key = 1;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // optional int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional int32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // optional bytes server_name = 6;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->server_name());
  }

  // optional int32 port = 7;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HBaseRegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HBaseRegionInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HBaseRegionInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HBaseRegionInfo::MergeFrom(const HBaseRegionInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void HBaseRegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBaseRegionInfo::CopyFrom(const HBaseRegionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBaseRegionInfo::IsInitialized() const {

  return true;
}

void HBaseRegionInfo::Swap(HBaseRegionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBaseRegionInfo::InternalSwap(HBaseRegionInfo* other) {
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(version_, other->version_);
  server_name_.Swap(&other->server_name_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HBaseRegionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HBaseRegionInfo_descriptor_;
  metadata.reflection = HBaseRegionInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HBaseRegionInfo

// optional bytes start_key = 1;
void HBaseRegionInfo::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HBaseRegionInfo::start_key() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.start_key)
}
 void HBaseRegionInfo::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.start_key)
}
 void HBaseRegionInfo::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.start_key)
}
 ::std::string* HBaseRegionInfo::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HBaseRegionInfo::release_start_key() {
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.start_key)
}

// optional bytes end_key = 2;
void HBaseRegionInfo::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HBaseRegionInfo::end_key() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.end_key)
}
 void HBaseRegionInfo::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.end_key)
}
 void HBaseRegionInfo::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.end_key)
}
 ::std::string* HBaseRegionInfo::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HBaseRegionInfo::release_end_key() {
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.end_key)
}

// optional int64 id = 3;
void HBaseRegionInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 HBaseRegionInfo::id() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.id)
  return id_;
}
 void HBaseRegionInfo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.id)
}

// optional bytes name = 4;
void HBaseRegionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HBaseRegionInfo::name() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.name)
}
 void HBaseRegionInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.name)
}
 void HBaseRegionInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.name)
}
 ::std::string* HBaseRegionInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HBaseRegionInfo::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.name)
}

// optional int32 version = 5;
void HBaseRegionInfo::clear_version() {
  version_ = 0;
}
 ::google::protobuf::int32 HBaseRegionInfo::version() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.version)
  return version_;
}
 void HBaseRegionInfo::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.version)
}

// optional bytes server_name = 6;
void HBaseRegionInfo::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HBaseRegionInfo::server_name() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.server_name)
  return server_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.server_name)
}
 void HBaseRegionInfo::set_server_name(const char* value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.HBaseRegionInfo.server_name)
}
 void HBaseRegionInfo::set_server_name(const void* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.HBaseRegionInfo.server_name)
}
 ::std::string* HBaseRegionInfo::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.HBaseRegionInfo.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HBaseRegionInfo::release_server_name() {
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HBaseRegionInfo::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.HBaseRegionInfo.server_name)
}

// optional int32 port = 7;
void HBaseRegionInfo::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 HBaseRegionInfo::port() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.HBaseRegionInfo.port)
  return port_;
}
 void HBaseRegionInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.HBaseRegionInfo.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kIndexFieldNumber;
const int TaskInfo::kTotalFieldNumber;
const int TaskInfo::kRegionFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbpipes.proto.TaskInfo)
}

void TaskInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  region_ = const_cast< ::pbpipes::proto::HBaseRegionInfo*>(&::pbpipes::proto::HBaseRegionInfo::default_instance());
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbpipes.proto.TaskInfo)
}

void TaskInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  index_ = 0;
  total_ = 0;
  region_ = NULL;
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:pbpipes.proto.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fpbpipes_2eproto();
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New(::google::protobuf::Arena* arena) const {
  TaskInfo* n = new TaskInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, total_);
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbpipes.proto.TaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (tag == 16) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region;
        break;
      }

      // optional .pbpipes.proto.HBaseRegionInfo region = 3;
      case 3: {
        if (tag == 26) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbpipes.proto.TaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbpipes.proto.TaskInfo)
  return false;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbpipes.proto.TaskInfo)
  // optional int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 total = 2;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // optional .pbpipes.proto.HBaseRegionInfo region = 3;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_, output);
  }

  // @@protoc_insertion_point(serialize_end:pbpipes.proto.TaskInfo)
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbpipes.proto.TaskInfo)
  // optional int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 total = 2;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // optional .pbpipes.proto.HBaseRegionInfo region = 3;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->region_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbpipes.proto.TaskInfo)
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  // optional int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // optional int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  // optional .pbpipes.proto.HBaseRegionInfo region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.has_region()) {
    mutable_region()->::pbpipes::proto::HBaseRegionInfo::MergeFrom(from.region());
  }
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {

  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfo::InternalSwap(TaskInfo* other) {
  std::swap(index_, other->index_);
  std::swap(total_, other->total_);
  std::swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfo

// optional int32 index = 1;
void TaskInfo::clear_index() {
  index_ = 0;
}
 ::google::protobuf::int32 TaskInfo::index() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskInfo.index)
  return index_;
}
 void TaskInfo::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.TaskInfo.index)
}

// optional int32 total = 2;
void TaskInfo::clear_total() {
  total_ = 0;
}
 ::google::protobuf::int32 TaskInfo::total() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskInfo.total)
  return total_;
}
 void TaskInfo::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.TaskInfo.total)
}

// optional .pbpipes.proto.HBaseRegionInfo region = 3;
bool TaskInfo::has_region() const {
  return !_is_default_instance_ && region_ != NULL;
}
void TaskInfo::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::pbpipes::proto::HBaseRegionInfo& TaskInfo::region() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskInfo.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
::pbpipes::proto::HBaseRegionInfo* TaskInfo::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::pbpipes::proto::HBaseRegionInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.TaskInfo.region)
  return region_;
}
::pbpipes::proto::HBaseRegionInfo* TaskInfo::release_region() {
  
  ::pbpipes::proto::HBaseRegionInfo* temp = region_;
  region_ = NULL;
  return temp;
}
void TaskInfo::set_allocated_region(::pbpipes::proto::HBaseRegionInfo* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.TaskInfo.region)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TaskResult::kOkFieldNumber;
#endif  // !_MSC_VER

TaskResult::TaskResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbpipes.proto.TaskResult)
}

void TaskResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskResult::TaskResult(const TaskResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbpipes.proto.TaskResult)
}

void TaskResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ok_ = false;
}

TaskResult::~TaskResult() {
  // @@protoc_insertion_point(destructor:pbpipes.proto.TaskResult)
  SharedDtor();
}

void TaskResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskResult_descriptor_;
}

const TaskResult& TaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fpbpipes_2eproto();
  return *default_instance_;
}

TaskResult* TaskResult::default_instance_ = NULL;

TaskResult* TaskResult::New(::google::protobuf::Arena* arena) const {
  TaskResult* n = new TaskResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskResult::Clear() {
  ok_ = false;
}

bool TaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbpipes.proto.TaskResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbpipes.proto.TaskResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbpipes.proto.TaskResult)
  return false;
#undef DO_
}

void TaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbpipes.proto.TaskResult)
  // optional bool ok = 1;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbpipes.proto.TaskResult)
}

::google::protobuf::uint8* TaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbpipes.proto.TaskResult)
  // optional bool ok = 1;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbpipes.proto.TaskResult)
  return target;
}

int TaskResult::ByteSize() const {
  int total_size = 0;

  // optional bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskResult::MergeFrom(const TaskResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void TaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskResult::CopyFrom(const TaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResult::IsInitialized() const {

  return true;
}

void TaskResult::Swap(TaskResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskResult::InternalSwap(TaskResult* other) {
  std::swap(ok_, other->ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskResult_descriptor_;
  metadata.reflection = TaskResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskResult

// optional bool ok = 1;
void TaskResult::clear_ok() {
  ok_ = false;
}
 bool TaskResult::ok() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.TaskResult.ok)
  return ok_;
}
 void TaskResult::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.TaskResult.ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ExecutorSpec::kHostFieldNumber;
const int ExecutorSpec::kNumExecutorsFieldNumber;
#endif  // !_MSC_VER

ExecutorSpec::ExecutorSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbpipes.proto.ExecutorSpec)
}

void ExecutorSpec::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExecutorSpec::ExecutorSpec(const ExecutorSpec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbpipes.proto.ExecutorSpec)
}

void ExecutorSpec::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_executors_ = 0;
}

ExecutorSpec::~ExecutorSpec() {
  // @@protoc_insertion_point(destructor:pbpipes.proto.ExecutorSpec)
  SharedDtor();
}

void ExecutorSpec::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExecutorSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorSpec_descriptor_;
}

const ExecutorSpec& ExecutorSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fpbpipes_2eproto();
  return *default_instance_;
}

ExecutorSpec* ExecutorSpec::default_instance_ = NULL;

ExecutorSpec* ExecutorSpec::New(::google::protobuf::Arena* arena) const {
  ExecutorSpec* n = new ExecutorSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecutorSpec::Clear() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_executors_ = 0;
}

bool ExecutorSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbpipes.proto.ExecutorSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pbpipes.proto.ExecutorSpec.host"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_executors;
        break;
      }

      // optional int32 num_executors = 2;
      case 2: {
        if (tag == 16) {
         parse_num_executors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_executors_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbpipes.proto.ExecutorSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbpipes.proto.ExecutorSpec)
  return false;
#undef DO_
}

void ExecutorSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbpipes.proto.ExecutorSpec)
  // optional string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbpipes.proto.ExecutorSpec.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional int32 num_executors = 2;
  if (this->num_executors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_executors(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbpipes.proto.ExecutorSpec)
}

::google::protobuf::uint8* ExecutorSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbpipes.proto.ExecutorSpec)
  // optional string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbpipes.proto.ExecutorSpec.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional int32 num_executors = 2;
  if (this->num_executors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_executors(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbpipes.proto.ExecutorSpec)
  return target;
}

int ExecutorSpec::ByteSize() const {
  int total_size = 0;

  // optional string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // optional int32 num_executors = 2;
  if (this->num_executors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_executors());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorSpec::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExecutorSpec* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutorSpec>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutorSpec::MergeFrom(const ExecutorSpec& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.num_executors() != 0) {
    set_num_executors(from.num_executors());
  }
}

void ExecutorSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorSpec::CopyFrom(const ExecutorSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorSpec::IsInitialized() const {

  return true;
}

void ExecutorSpec::Swap(ExecutorSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutorSpec::InternalSwap(ExecutorSpec* other) {
  host_.Swap(&other->host_);
  std::swap(num_executors_, other->num_executors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutorSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorSpec_descriptor_;
  metadata.reflection = ExecutorSpec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutorSpec

// optional string host = 1;
void ExecutorSpec::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExecutorSpec::host() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.ExecutorSpec.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExecutorSpec::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbpipes.proto.ExecutorSpec.host)
}
 void ExecutorSpec::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbpipes.proto.ExecutorSpec.host)
}
 void ExecutorSpec::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbpipes.proto.ExecutorSpec.host)
}
 ::std::string* ExecutorSpec::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.ExecutorSpec.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExecutorSpec::release_host() {
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExecutorSpec::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:pbpipes.proto.ExecutorSpec.host)
}

// optional int32 num_executors = 2;
void ExecutorSpec::clear_num_executors() {
  num_executors_ = 0;
}
 ::google::protobuf::int32 ExecutorSpec::num_executors() const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.ExecutorSpec.num_executors)
  return num_executors_;
}
 void ExecutorSpec::set_num_executors(::google::protobuf::int32 value) {
  
  num_executors_ = value;
  // @@protoc_insertion_point(field_set:pbpipes.proto.ExecutorSpec.num_executors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DriverConfig::kExecutorsFieldNumber;
#endif  // !_MSC_VER

DriverConfig::DriverConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbpipes.proto.DriverConfig)
}

void DriverConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DriverConfig::DriverConfig(const DriverConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbpipes.proto.DriverConfig)
}

void DriverConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DriverConfig::~DriverConfig() {
  // @@protoc_insertion_point(destructor:pbpipes.proto.DriverConfig)
  SharedDtor();
}

void DriverConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DriverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverConfig_descriptor_;
}

const DriverConfig& DriverConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fpbpipes_2eproto();
  return *default_instance_;
}

DriverConfig* DriverConfig::default_instance_ = NULL;

DriverConfig* DriverConfig::New(::google::protobuf::Arena* arena) const {
  DriverConfig* n = new DriverConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriverConfig::Clear() {
  executors_.Clear();
}

bool DriverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbpipes.proto.DriverConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbpipes.proto.ExecutorSpec executors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_executors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_executors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_executors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbpipes.proto.DriverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbpipes.proto.DriverConfig)
  return false;
#undef DO_
}

void DriverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbpipes.proto.DriverConfig)
  // repeated .pbpipes.proto.ExecutorSpec executors = 1;
  for (unsigned int i = 0, n = this->executors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbpipes.proto.DriverConfig)
}

::google::protobuf::uint8* DriverConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbpipes.proto.DriverConfig)
  // repeated .pbpipes.proto.ExecutorSpec executors = 1;
  for (unsigned int i = 0, n = this->executors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbpipes.proto.DriverConfig)
  return target;
}

int DriverConfig::ByteSize() const {
  int total_size = 0;

  // repeated .pbpipes.proto.ExecutorSpec executors = 1;
  total_size += 1 * this->executors_size();
  for (int i = 0; i < this->executors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->executors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DriverConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DriverConfig::MergeFrom(const DriverConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  executors_.MergeFrom(from.executors_);
}

void DriverConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverConfig::CopyFrom(const DriverConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverConfig::IsInitialized() const {

  return true;
}

void DriverConfig::Swap(DriverConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverConfig::InternalSwap(DriverConfig* other) {
  executors_.UnsafeArenaSwap(&other->executors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriverConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DriverConfig_descriptor_;
  metadata.reflection = DriverConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriverConfig

// repeated .pbpipes.proto.ExecutorSpec executors = 1;
int DriverConfig::executors_size() const {
  return executors_.size();
}
void DriverConfig::clear_executors() {
  executors_.Clear();
}
const ::pbpipes::proto::ExecutorSpec& DriverConfig::executors(int index) const {
  // @@protoc_insertion_point(field_get:pbpipes.proto.DriverConfig.executors)
  return executors_.Get(index);
}
::pbpipes::proto::ExecutorSpec* DriverConfig::mutable_executors(int index) {
  // @@protoc_insertion_point(field_mutable:pbpipes.proto.DriverConfig.executors)
  return executors_.Mutable(index);
}
::pbpipes::proto::ExecutorSpec* DriverConfig::add_executors() {
  // @@protoc_insertion_point(field_add:pbpipes.proto.DriverConfig.executors)
  return executors_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbpipes::proto::ExecutorSpec >*
DriverConfig::mutable_executors() {
  // @@protoc_insertion_point(field_mutable_list:pbpipes.proto.DriverConfig.executors)
  return &executors_;
}
const ::google::protobuf::RepeatedPtrField< ::pbpipes::proto::ExecutorSpec >&
DriverConfig::executors() const {
  // @@protoc_insertion_point(field_list:pbpipes.proto.DriverConfig.executors)
  return executors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pbpipes

// @@protoc_insertion_point(global_scope)
